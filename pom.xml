<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <packaging>pom</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.13</version>
    </parent>

    <!-- 产品组名称【中台项目组固定com.gg.midend】 -->
    <groupId>com.gg.midend</groupId>

    <artifactId>midend-service-center</artifactId>
    <version>1.0.0</version>

    <!-- 配置变量属性【例如：一些引用三方jar的版本信息】 -->
    <properties>
        <java.version>1.8</java.version>
        <insanity.version>2.0.1</insanity.version>
        <commons-collections4.version>4.4</commons-collections4.version>
        <fastjson.version>1.2.83</fastjson.version>
        <druid.version>1.2.8</druid.version>
        <mybatis-spring-boot-starter.version>2.2.2</mybatis-spring-boot-starter.version>
        <mybatis-generator-core.version>1.4.0</mybatis-generator-core.version>
        <pagehelper-spring-boot-starter.version>1.4.1</pagehelper-spring-boot-starter.version>
        <commons.version>2.7</commons.version>
        <hutool.version>5.8.14</hutool.version>
        <lombok.version>1.18.26</lombok.version>
    </properties>

    <!-- 下面是依赖部分【根据各个产品项目的不同，可能有增减】 -->
    <dependencies>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <!-- 用了log4j2，则这要排除默认的日志组件，避免冲突 -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 基于aop的接口调用时间性能分析 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!-- 通用封装类（自研） -->
        <dependency>
            <groupId>io.github.lufm0628</groupId>
            <artifactId>insanity</artifactId>
            <version>${insanity.version}</version>
        </dependency>

        <!-- log4j2 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!-- commons -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${commons-collections4.version}</version>
        </dependency>

        <!-- fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>

        <!-- sql -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot-starter.version}</version>
        </dependency>

        <!-- mysql连接器 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- JDBC组件库 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid.version}</version>
        </dependency>

        <!-- xml脚本自动生成 -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>${mybatis-generator-core.version}</version>
        </dependency>

        <!-- 分页查询 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>${pagehelper-spring-boot-starter.version}</version>
        </dependency>

        <!-- 字段校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- commons-io -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.version}</version>
        </dependency>

        <!-- hutool工具类 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>

        <!-- bean构建器 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

    </dependencies>

    <build>
        <!-- 打包组件  -->
        <!--
           打包思想：
             我们不推荐使用springboot默认的打包方式：
                 <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <fork>true</fork>
                        <includeSystemScope>true</includeSystemScope>
                        <addResources>true</addResources>
                    </configuration>
                 </plugin>
            以上打包方式会将所有引入的三方jar都打在一起，造成应用jar包非常大，不便于今后项目中的更新，而且本身三方jar基本都不用改。

            我们推荐将三方jar包以外部lib文件夹的方式来应用，这样就可以使我们开发的应用jar体积很小，很便于生产上的更新，降低网络流量，
            从而提高效率，具体见如下配置，虽然配置多了，但是几乎也不用改。
        -->
        <plugins>
            <!-- maven-resources-plugin：资源文件自动打包拷贝的插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>

            <!-- maven-compiler-plugin：java编译插件，告诉maven在编译Java文件时使用什么版本的jre -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!-- maven-dependency-plugin：支持分开打包成lib文件夹和jar文件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- 三方jar包的打包输出路径，部署的时候，记得把lib目录也一起发布 -->
                            <outputDirectory>${pom.basedir}/target/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <excludeTransitive>false</excludeTransitive>
                            <stripVersion>false</stripVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- maven-jar-plugin：这个插件通常用法是将maven工程打成jar包  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <archive>
                        <!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 -->
                        <addMavenDescriptor>false</addMavenDescriptor>

                        <!-- 主要配置 -->
                        <!-- 以下配置不会在MANIFEST.MF文件jar清单写入systemPath配置的本地jar信息 -->
                        <manifest>
                            <!--是否要把第三方jar放到manifest的classpath中-->
                            <addClasspath>true</addClasspath>
                            <!--生成的manifest中classpath的前缀，因为要把第三方jar放到lib目录下，所以classpath的前缀是lib/-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!--指定该Main Class为全局的唯一入口-->
                            <!--这个是工程启动类的路径，要求固定，如果实际情况必须个性化定义，那这里就要改了 -->
                            <mainClass>com.gg.midend.StartApplication</mainClass>
                        </manifest>

                    </archive>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
