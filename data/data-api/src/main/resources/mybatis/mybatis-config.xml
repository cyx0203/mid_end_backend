<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"> 
<configuration>

    <properties>
        <!-- 基础配置部分 -->
        <property name="db_type" value="MYSQL"/>
    </properties>

    <!-- 基本配置 -->
    <settings>
        <setting name="cacheEnabled" value="true"/>               <!-- 这个配置使全局的映射器启用或禁用缓存 -->
        <setting name="lazyLoadingEnabled" value="true"/>         <!-- 全局启用或禁用延迟加载。当开启时，所有关联对象都会延迟加载。-->
        <setting name="multipleResultSetsEnabled" value="true"/>  <!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动） -->
        <setting name="useColumnLabel" value="true"/>             <!-- 使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动 -->
        <setting name="useGeneratedKeys" value="true"/>           <!-- 允许JDBC支持生成的键。需要适合的驱动。如果设置为true则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如Derby） -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>     <!-- 指定MyBatis如何自动映射列到字段/属性。PARTIAL只会自动映射简单，没有嵌套的结果。FULL会自动映射任意复杂的结果（嵌套的或其他情况） -->
        <setting name="defaultExecutorType" value="SIMPLE"/>      <!-- 配置默认的执行器。SIMPLE执行器没有什么特别之处。REUSE执行器重用预处理语句。BATCH执行器重用语句和批量更新 -->
        <setting name="defaultStatementTimeout" value="25000"/>   <!-- 设置超时时间，它决定驱动等待一个数据库响应的时间 -->
        <setting name="callSettersOnNulls" value="true"/>         <!-- 支持在返回字段参数为null的时候，会返回字段 -->
        <setting name="logImpl" value="LOG4J2" />                 <!-- 指定日志实现类为log4j2 -->
        <setting name="logPrefix" value="MyBatisLog." />          <!-- 指定MyBatis增加到日志名称的前缀 -->
    </settings>

	<!--
	    这个文件是MyBatis的传统配置文件格式
        注意标签配置顺序（不然运行会报错）：
        properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,
        reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?
    -->
	<!-- 别名设置 -->
    <!--<typeAliases>-->
        <!-- 以下是类型转换的别名设置 -->

        <!-- 指定到包（批量指定） -->
        <!--<package name="com.geit.ys.mysql.mybatis.domain" />-->
        <!--<package name="com.geit.ys.mysql.mybatis.typehandlers" />-->

        <!-- 指定到具体的类的别名（详细指定） -->
        <!--<typeAlias alias="NullValueHandler" type="com.geit.ys.mysql.mybatis.typehandlers.NullValueHandler" />   -->
    <!--</typeAliases>-->
	
    <!--<typeHandlers>-->
	    <!-- 指定TypeHandler类所在的包 -->
        <!--<package name="com.geit.ys.mysql.mybatis.typehandlers" />-->

        <!-- 指定具体的TypeHandler类 -->
        <!-- 处理插入null问题 -->
        <!--<typeHandler jdbcType="VARCHAR" javaType="String" handler="com.geit.ys.mysql.mybatis.typehandlers.NullValueHandler"/>-->
    <!--</typeHandlers>-->


    <!-- 映射 -->
    <mappers>
        <!--
          mybatis 官网提供了4种mappers方式：
          <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>
          <mapper url="file:///var/mappers/AuthorMapper.xml"/>
          <mapper class="org.mybatis.builder.AuthorMapper"/>
          <package name="org.mybatis.builder"/>

          引入xml文件的方式不支持批量，只能一个个写，springboot却可以在application.properties文件中
          配置批量匹配属性：mybatis.mapper-locations=classpath*:mapper/*.xml
         -->
        <!--<mapper resource="mapper/UserMapper.xml" />-->
    </mappers>
	
</configuration>